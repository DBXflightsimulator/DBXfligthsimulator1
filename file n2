let scene, camera, renderer;
let airplane, cockpitCamera, externalCamera, activeCamera;
let container = document.getElementById('container');
let currentFPS = 60;
let isExternalView = false;

// Initialize scene
function init() {
    scene = new THREE.Scene();

    // Renderer setup
    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    container.appendChild(renderer.domElement);

    // External camera
    externalCamera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    externalCamera.position.set(10, 10, 20);
    externalCamera.lookAt(0, 0, 0);

    // Cockpit camera
    cockpitCamera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    cockpitCamera.position.set(0, 1, 0);

    // Set the initial active camera
    activeCamera = cockpitCamera;

    // Airplane model
    const geometry = new THREE.BoxGeometry(2, 1, 5);
    const material = new THREE.MeshBasicMaterial({ color: 0xff0000 });
    airplane = new THREE.Mesh(geometry, material);
    scene.add(airplane);

    // Light
    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(5, 10, 7.5);
    scene.add(light);

    // Animation loop
    animate();
}

// Handle window resize
window.addEventListener('resize', () => {
    renderer.setSize(window.innerWidth, window.innerHeight);
    activeCamera.aspect = window.innerWidth / window.innerHeight;
    activeCamera.updateProjectionMatrix();
});

// Camera switch handler
document.getElementById('cameraSwitch').addEventListener('click', () => {
    isExternalView = !isExternalView;
    activeCamera = isExternalView ? externalCamera : cockpitCamera;
});

// FPS toggle handler
document.getElementById('fpsToggle').addEventListener('click', () => {
    currentFPS = currentFPS === 60 ? 30 : currentFPS === 30 ? 120 : 60;
    clearInterval(intervalId);
    intervalId = setInterval(animate, 1000 / currentFPS);
});

// Basic animation loop with interval control for FPS
let intervalId = setInterval(animate, 1000 / currentFPS);
function animate() {
    // Move the plane
    airplane.rotation.y += 0.01;

    // Sync cameras with the airplane
    cockpitCamera.position.copy(airplane.position);
    cockpitCamera.rotation.copy(airplane.rotation);

    // Render the scene with the active camera
    renderer.render(scene, activeCamera);
}

init();
